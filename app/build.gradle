plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'org.jlleitschuh.gradle.ktlint'
}

def config = rootProject.ext

android {
    signingConfigs {
        release {
            // Store release config at `~/.gradle/gradle.properties`
            // @see https://reactnative.dev/docs/signed-apk-android#setting-up-gradle-variables
            // APM means Alpaca Muscle Maintenance
            if (project.hasProperty('APM_UPLOAD_STORE_FILE')) {
                storeFile file(APM_UPLOAD_STORE_FILE)
                storePassword APM_UPLOAD_STORE_PASSWORD
                keyAlias APM_UPLOAD_KEY_ALIAS
                keyPassword APM_UPLOAD_KEY_PASSWORD
            }
        }
    }

    compileSdkVersion config.targetSdkVersion
    buildToolsVersion config.buildToolsVersion

    defaultConfig {
        applicationId "com.example.alpacamusclemaintenance"

        minSdkVersion config.minSdkVersion
        targetSdkVersion config.targetSdkVersion
        versionCode config.versionCode
        versionName config.versionName

        testInstrumentationRunner config.testInstrumentationRunner
        consumerProguardFiles config.consumerProguardFiles
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    compileOptions {
        // @see https://developer.android.com/studio/write/java8-support#library-desugaring
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
        freeCompilerArgs += ["-Xopt-in=kotlin.RequiresOptIn"]
    }
}

apply from: '../dependencies-all.gradle'

dependencies {
    implementation project(':data')
    implementation project(':domain')
    implementation project(':presentation')
    androidTestImplementation project(':testing')

    commonLang()
    core()
    dagger2()
    gson()
    hilt()
    lifecycle()
    okhttpLoggingInterceptor()

    androidTesting()
    testing()

    // Room - https://developer.android.com/jetpack/androidx/releases/room
    def room_version = "2.2.6"
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    implementation "androidx.room:room-ktx:$room_version"

    // WorkManager - https://developer.android.com/jetpack/androidx/releases/work
    implementation "androidx.work:work-runtime-ktx:2.4.0"

    // Flipper - https://fbflipper.com/docs/getting-started/android-native
    debugImplementation 'com.facebook.flipper:flipper:0.69.0'
    debugImplementation 'com.facebook.soloader:soloader:0.9.0'
    debugImplementation 'com.facebook.flipper:flipper-network-plugin:0.57.0'
    releaseImplementation 'com.facebook.flipper:flipper-noop:0.69.0'

    // Fragment testing - https://developer.android.com/training/basics/fragments/testing#configure
    // for exclusion option have a look at https://github.com/android/android-test/issues/294#issuecomment-506994394
    debugImplementation ('androidx.fragment:fragment-testing:1.2.5') {
        exclude group: 'androidx.test', module : 'core'
    }
}

ktlint {
    android = true
}
